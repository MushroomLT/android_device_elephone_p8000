From d307fb1ed9988086c6432909af307dba778f8927 Mon Sep 17 00:00:00 2001
From: Dmitry Smirnov <divis1969@gmail.com>
Date: Sat, 19 Mar 2016 22:25:44 +0300
Subject: [PATCH] Add the Xlog class

This class is used by MTK engineering app

Change-Id: If483d0bf30c7045af2b0c1f41273af99b28b5648
---
 core/java/com/mediatek/xlog/Xlog.java | 95 +++++++++++++++++++++++++++++++++++
 1 file changed, 95 insertions(+)
 create mode 100644 core/java/com/mediatek/xlog/Xlog.java

diff --git a/core/java/com/mediatek/xlog/Xlog.java b/core/java/com/mediatek/xlog/Xlog.java
new file mode 100644
index 0000000..a04c677
--- /dev/null
+++ b/core/java/com/mediatek/xlog/Xlog.java
@@ -0,0 +1,95 @@
+/* Copyright Statement:
+ *
+ * This software/firmware and related documentation ("MediaTek Software") are
+ * protected under relevant copyright laws. The information contained herein is
+ * confidential and proprietary to MediaTek Inc. and/or its licensors. Without
+ * the prior written permission of MediaTek inc. and/or its licensors, any
+ * reproduction, modification, use or disclosure of MediaTek Software, and
+ * information contained herein, in whole or in part, shall be strictly
+ * prohibited.
+ * 
+ * MediaTek Inc. (C) 2010. All rights reserved.
+ * 
+ * BY OPENING THIS FILE, RECEIVER HEREBY UNEQUIVOCALLY ACKNOWLEDGES AND AGREES
+ * THAT THE SOFTWARE/FIRMWARE AND ITS DOCUMENTATIONS ("MEDIATEK SOFTWARE")
+ * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER
+ * ON AN "AS-IS" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL
+ * WARRANTIES, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED
+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR
+ * NONINFRINGEMENT. NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH
+ * RESPECT TO THE SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY,
+ * INCORPORATED IN, OR SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES
+ * TO LOOK ONLY TO SUCH THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO.
+ * RECEIVER EXPRESSLY ACKNOWLEDGES THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO
+ * OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES CONTAINED IN MEDIATEK
+ * SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK SOFTWARE
+ * RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
+ * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S
+ * ENTIRE AND CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE
+ * RELEASED HEREUNDER WILL BE, AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE
+ * MEDIATEK SOFTWARE AT ISSUE, OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE
+ * CHARGE PAID BY RECEIVER TO MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
+*
+ * The following software/firmware and/or related documentation ("MediaTek
+ * Software") have been modified by MediaTek Inc. All revisions are subject to
+ * any receiver's applicable license agreements with MediaTek Inc.
+ */
+
+package com.mediatek.xlog;
+
+import android.util.Log;
+
+public final class Xlog {
+    public static int v(String tag, String msg) {
+        //return println_native(Log.LOG_ID_MAIN, Log.VERBOSE, tag, msg);
+        return Log.v(tag, msg);
+    }
+
+    public static int v(String tag, String msg, Throwable tr) {
+        //return println_native(Log.LOG_ID_MAIN, Log.VERBOSE, tag, msg + '\n' + Log.getStackTraceString(tr));
+        return Log.v(tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    public static int d(String tag, String msg) {
+        //return println_native(Log.LOG_ID_MAIN, Log.DEBUG, tag, msg);
+        return Log.d(tag, msg);
+    }
+
+    public static int d(String tag, String msg, Throwable tr) {
+        //return println_native(Log.LOG_ID_MAIN, Log.DEBUG, tag, msg + '\n' + Log.getStackTraceString(tr));
+        return Log.d(tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    public static int i(String tag, String msg) {
+        //return println_native(Log.LOG_ID_MAIN, Log.INFO, tag, msg);
+        return Log.i(tag, msg);
+    }
+
+    public static int i(String tag, String msg, Throwable tr) {
+        //return println_native(Log.LOG_ID_MAIN, Log.INFO, tag, msg + '\n' + Log.getStackTraceString(tr));
+        return Log.i(tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    public static int w(String tag, String msg) {
+        //return println_native(Log.LOG_ID_MAIN, Log.WARN, tag, msg);
+        return Log.w(tag, msg);
+    }
+
+    public static int w(String tag, String msg, Throwable tr) {
+        //return println_native(Log.LOG_ID_MAIN, Log.WARN, tag, msg + '\n' + Log.getStackTraceString(tr));
+        return Log.w(tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    public static int e(String tag, String msg) {
+        //return println_native(Log.LOG_ID_MAIN, Log.ERROR, tag, msg);
+        return Log.e(tag, msg);
+    }
+
+    public static int e(String tag, String msg, Throwable tr) {
+        //return println_native(Log.LOG_ID_MAIN, Log.ERROR, tag, msg + '\n' + Log.getStackTraceString(tr));
+        return Log.e(tag, msg + '\n' + Log.getStackTraceString(tr));
+    }
+
+    /** at hide */ /*public static native int println_native(int bufID,
+            int priority, String tag, String msg); */
+}
